/*----- PROTECTED REGION ID(FakeClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        FakeClass.h
//
// description : Include for the Fake root class.
//               This class is the singleton class for
//                the Fake device class.
//               It contains all properties and methods which the 
//               Fake requires only once e.g. the commands.
//
// project :     Fake
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef FakeClass_H
#define FakeClass_H

#include <tango.h>
#include <Fake.h>


/*----- PROTECTED REGION END -----*/	//	FakeClass.h


namespace Fake_ns
{
/*----- PROTECTED REGION ID(FakeClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	FakeClass::classes for dynamic creation

/**
 *	The FakeClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  FakeClass : public Tango::DeviceClass
#else
class FakeClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(FakeClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	FakeClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static FakeClass *init(const char *);
		static FakeClass *instance();
		~FakeClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		FakeClass(string &);
		static FakeClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	Fake_H
